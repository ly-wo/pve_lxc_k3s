name: Release and Distribution

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 发布信息验证
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      release-notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
            IS_PRERELEASE="${{ inputs.prerelease }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Generate release notes
        id: notes
        run: |
          echo "Generating comprehensive release notes..."
          
          VERSION="${{ steps.version.outputs.version }}"
          
          # 获取上一个版本标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 生成变更日志
          cat > release-notes.md << EOF
          # Release Notes for ${VERSION}
          
          ## What's New
          
          EOF
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "### Changes since ${PREVIOUS_TAG}" >> release-notes.md
            echo "" >> release-notes.md
            
            # 获取提交历史
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # 添加技术信息
          cat >> release-notes.md << EOF
          
          ## Technical Details
          
          ### Template Specifications
          - **Base OS**: Alpine Linux 3.18
          - **Architecture**: amd64
          - **K3s Version**: Latest stable
          - **Container Runtime**: containerd
          - **Network Plugin**: Flannel
          
          ### Security Features
          - Minimal attack surface with Alpine Linux
          - Non-root user execution
          - Firewall rules configured
          - Security hardening applied
          
          ### Performance Optimizations
          - Optimized package selection
          - Reduced image size
          - Fast startup time
          - Memory efficient
          
          ## Installation Instructions
          
          ### Quick Start
          1. Download the template file from the release assets
          2. Upload to your Proxmox VE server:
             \`\`\`bash
             pveam upload local ${VERSION}-alpine-k3s-template.tar.gz
             \`\`\`
          3. Create a new LXC container:
             \`\`\`bash
             pct create 100 local:vztmpl/${VERSION}-alpine-k3s-template.tar.gz \\
               --hostname k3s-node \\
               --memory 2048 \\
               --cores 2 \\
               --net0 name=eth0,bridge=vmbr0,ip=dhcp
             \`\`\`
          4. Start the container:
             \`\`\`bash
             pct start 100
             \`\`\`
          
          ### Advanced Configuration
          
          #### Multi-node Cluster Setup
          For setting up a multi-node K3s cluster, refer to the documentation in the repository.
          
          #### Custom Configuration
          The template supports various configuration options through environment variables and config files.
          
          ## Verification
          
          After installation, verify the K3s cluster is running:
          \`\`\`bash
          pct exec 100 -- k3s kubectl get nodes
          \`\`\`
          
          ## Support
          
          - **Documentation**: See the repository README
          - **Issues**: Report bugs via GitHub Issues
          - **Discussions**: Join GitHub Discussions for questions
          
          ## Checksums
          
          Verify the integrity of downloaded files using the provided SHA256 checksums.
          
          EOF
          
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # 构建发布版本
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      artifacts: ${{ steps.build.outputs.artifacts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "Setting up release build environment..."
          
          # 安装构建依赖
          sudo apt-get update
          sudo apt-get install -y \
            debootstrap \
            qemu-user-static \
            binfmt-support \
            systemd-container \
            curl \
            wget \
            tar \
            gzip \
            xz-utils \
            jq

      - name: Build release template
        id: build
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
        run: |
          echo "Building release template for version: $VERSION"
          
          # 设置版本信息
          sed -i "s/version: \".*\"/version: \"${VERSION#v}\"/" config/template.yaml
          
          # 设置权限
          chmod +x scripts/*.sh
          
          # 执行构建
          sudo -E scripts/build-template.sh
          
          # 执行打包
          sudo scripts/packager.sh package
          
          # 重命名文件以包含版本信息
          cd output/
          for file in *.tar.gz; do
            if [[ -f "$file" ]]; then
              new_name="${VERSION}-${file}"
              mv "$file" "$new_name"
              echo "Renamed $file to $new_name"
            fi
          done
          
          # 生成校验和
          for file in *.tar.gz; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" > "${file}.sha256"
              echo "Generated checksum for $file"
            fi
          done
          
          # 输出构建的文件列表
          ARTIFACTS=$(ls -1 *.tar.gz *.sha256 | jq -R -s -c 'split("\n")[:-1]')
          echo "artifacts=$ARTIFACTS" >> $GITHUB_OUTPUT
          
          echo "Release build completed"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            output/*.tar.gz
            output/*.sha256
          retention-days: 90

  # 发布到 GitHub Releases
  publish-github-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: output/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: PVE LXC K3s Template ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.validate-release.outputs.release-notes }}
          files: |
            output/*.tar.gz
            output/*.sha256
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 更新发布资产
  update-release-assets:
    name: Update Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: output/

      - name: Upload additional assets to existing release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          files: |
            output/*.tar.gz
            output/*.sha256
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布到容器注册表
  publish-container-registry:
    name: Publish to Container Registry
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: output/

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Create and push container image
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION#v}"
          
          echo "Creating container image: $IMAGE_TAG"
          
          # 创建 Dockerfile 用于分发
          cat > Dockerfile << EOF
          FROM scratch
          COPY output/*.tar.gz /templates/
          COPY output/*.sha256 /templates/
          COPY README.md /
          COPY docs/ /docs/
          LABEL org.opencontainers.image.title="PVE LXC K3s Template"
          LABEL org.opencontainers.image.description="Alpine Linux LXC template with pre-installed K3s"
          LABEL org.opencontainers.image.version="${VERSION#v}"
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          EOF
          
          # 构建并推送镜像
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"
          
          # 如果不是预发布版本，也推送 latest 标签
          if [[ "${{ needs.validate-release.outputs.is-prerelease }}" != "true" ]]; then
            LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            docker tag "$IMAGE_TAG" "$LATEST_TAG"
            docker push "$LATEST_TAG"
            echo "Also pushed as: $LATEST_TAG"
          fi

  # 更新文档
  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in documentation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "Updating documentation for version: $VERSION"
          
          # 更新 README.md 中的版本信息
          if [[ -f README.md ]]; then
            sed -i "s/Version: [^)]*/Version: ${VERSION#v}/" README.md
            sed -i "s/download\/v[0-9.]*\//download\/${VERSION}\//" README.md
          fi
          
          # 更新文档中的下载链接
          if [[ -d docs/ ]]; then
            find docs/ -name "*.md" -exec sed -i "s/download\/v[0-9.]*\//download\/${VERSION}\//" {} \;
          fi
          
          # 检查是否有变更
          if git diff --quiet; then
            echo "No documentation updates needed"
          else
            echo "Documentation updated, committing changes"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "docs: update version references to ${VERSION}"
            git push
          fi

  # 通知和后续处理
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, publish-github-release, update-documentation]
    if: always()
    steps:
      - name: Create release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ${{ needs.build-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.publish-github-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.update-documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the release assets are available" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the template deployment" >> $GITHUB_STEP_SUMMARY
          echo "3. Update any dependent projects" >> $GITHUB_STEP_SUMMARY
          echo "4. Announce the release if needed" >> $GITHUB_STEP_SUMMARY

      - name: Create issue for release verification
        if: needs.build-release.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const isPrerelease = '${{ needs.validate-release.outputs.is-prerelease }}' === 'true';
            
            const title = `Verify Release ${version}`;
            const body = `## Release Verification Checklist
            
            Please verify the following for release ${version}:
            
            ### Download and Installation
            - [ ] Template file downloads successfully
            - [ ] SHA256 checksum verification passes
            - [ ] Template uploads to PVE successfully
            - [ ] LXC container creates from template
            - [ ] Container starts without errors
            
            ### Functionality
            - [ ] K3s service starts automatically
            - [ ] K3s API is accessible
            - [ ] kubectl commands work
            - [ ] Basic pod deployment works
            - [ ] Network connectivity is functional
            
            ### Documentation
            - [ ] README reflects correct version
            - [ ] Installation instructions are accurate
            - [ ] Release notes are complete
            
            ### Multi-node Testing (if applicable)
            - [ ] Additional nodes can join cluster
            - [ ] Cluster networking works across nodes
            - [ ] Load balancing functions correctly
            
            **Release Type**: ${isPrerelease ? 'Pre-release' : 'Stable Release'}
            **Verification Deadline**: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
            
            /cc @${context.actor}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release', 'verification', isPrerelease ? 'prerelease' : 'stable']
            });