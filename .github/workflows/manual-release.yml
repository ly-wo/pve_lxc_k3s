name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
          - draft
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

env:
  TEMPLATE_NAME: alpine-k3s

jobs:
  # 验证输入
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is-prerelease: ${{ steps.validate.outputs.is-prerelease }}
      is-draft: ${{ steps.validate.outputs.is-draft }}
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ inputs.version }}"
          
          # 验证版本格式
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          
          echo "✅ Version format is valid: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # 设置发布类型
          case "${{ inputs.release_type }}" in
            "prerelease")
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
              echo "is-draft=false" >> $GITHUB_OUTPUT
              ;;
            "draft")
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
              echo "is-draft=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
              echo "is-draft=false" >> $GITHUB_OUTPUT
              ;;
          esac

  # 构建制品
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    outputs:
      template-file: ${{ steps.build.outputs.template-file }}
      template-size: ${{ steps.build.outputs.template-size }}
      build-time: ${{ steps.build.outputs.build-time }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "Setting up build environment for ${{ needs.validate-inputs.outputs.version }}"
          
          # 安装构建依赖
          sudo apt-get update
          sudo apt-get install -y \
            debootstrap \
            qemu-user-static \
            binfmt-support \
            systemd-container \
            curl \
            wget \
            tar \
            gzip \
            xz-utils \
            jq

      - name: Build template
        id: build
        run: |
          echo "Building template for release ${{ needs.validate-inputs.outputs.version }}"
          BUILD_START=$(date +%s)
          
          # 设置权限
          chmod +x scripts/*.sh
          
          # 创建必要目录
          mkdir -p .build .cache logs output
          
          # 更新配置中的版本号
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          sed -i "s/version: \".*\"/version: \"${VERSION#v}\"/" config/template.yaml
          
          # 执行构建
          echo "Starting template build..."
          if sudo -E scripts/build-template.sh; then
            echo "✅ Template build completed"
          else
            echo "❌ Template build failed"
            exit 1
          fi
          
          # 执行打包
          echo "Starting template packaging..."
          if sudo scripts/packager.sh package; then
            echo "✅ Template packaging completed"
          else
            echo "❌ Template packaging failed"
            exit 1
          fi
          
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          
          # 获取模板文件信息
          TEMPLATE_FILE=$(find output/ -name "*.tar.gz" -type f | head -n1)
          if [[ -n "$TEMPLATE_FILE" ]]; then
            TEMPLATE_SIZE=$(du -h "$TEMPLATE_FILE" | cut -f1)
            echo "template-file=$TEMPLATE_FILE" >> $GITHUB_OUTPUT
            echo "template-size=$TEMPLATE_SIZE" >> $GITHUB_OUTPUT
            echo "build-time=$BUILD_TIME" >> $GITHUB_OUTPUT
            
            echo "Template built successfully:"
            echo "  File: $TEMPLATE_FILE"
            echo "  Size: $TEMPLATE_SIZE"
            echo "  Build time: ${BUILD_TIME}s"
          else
            echo "❌ No template file found"
            exit 1
          fi

      - name: Generate checksums
        run: |
          echo "Generating checksums..."
          
          cd output/
          for file in *.tar.gz; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" > "${file}.sha256"
              sha512sum "$file" > "${file}.sha512"
              md5sum "$file" > "${file}.md5"
              echo "Generated checksums for $file"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-inputs.outputs.version }}
          path: |
            output/*.tar.gz
            output/*.sha256
            output/*.sha512
            output/*.md5
          retention-days: 30

  # 创建 GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-artifacts]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-inputs.outputs.version }}
          path: output/

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          BUILD_TIME="${{ needs.build-artifacts.outputs.build-time }}"
          TEMPLATE_SIZE="${{ needs.build-artifacts.outputs.template-size }}"
          
          # 获取上一个版本标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 生成发布说明
          cat > release-notes.md << EOF
          # PVE LXC K3s Template ${VERSION}
          
          ## 📦 Release Information
          
          - **Version**: ${VERSION}
          - **Release Type**: ${{ inputs.release_type }}
          - **Build Time**: ${BUILD_TIME} seconds
          - **Template Size**: ${TEMPLATE_SIZE}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## 🚀 Features
          
          - ✅ Pre-installed K3s Kubernetes cluster
          - ✅ Optimized Alpine Linux base
          - ✅ Security hardening applied
          - ✅ Auto-start K3s service
          - ✅ Multi-node cluster support
          
          ## 📋 Quick Installation
          
          1. **Download the template**:
             \`\`\`bash
             wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/$(basename ${{ needs.build-artifacts.outputs.template-file }})
             \`\`\`
          
          2. **Upload to Proxmox VE**:
             \`\`\`bash
             pveam upload local $(basename ${{ needs.build-artifacts.outputs.template-file }})
             \`\`\`
          
          3. **Create LXC container**:
             \`\`\`bash
             pct create 100 local:vztmpl/$(basename ${{ needs.build-artifacts.outputs.template-file }}) \\
               --hostname k3s-master \\
               --memory 2048 \\
               --cores 2 \\
               --rootfs local-lvm:20 \\
               --net0 name=eth0,bridge=vmbr0,ip=dhcp \\
               --unprivileged 1
             \`\`\`
          
          4. **Start and verify**:
             \`\`\`bash
             pct start 100
             pct exec 100 -- k3s kubectl get nodes
             \`\`\`
          
          EOF
          
          # 添加自定义发布说明
          if [[ -n "${{ inputs.release_notes }}" ]]; then
            echo "" >> release-notes.md
            echo "## 📝 Release Notes" >> release-notes.md
            echo "" >> release-notes.md
            echo "${{ inputs.release_notes }}" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # 添加变更日志（如果有上一个版本）
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "" >> release-notes.md
            echo "## 📝 Changes Since ${PREVIOUS_TAG}" >> release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # 添加文件列表和校验和
          echo "" >> release-notes.md
          echo "## 📁 Release Assets" >> release-notes.md
          echo "" >> release-notes.md
          
          for file in output/*.tar.gz; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              filesize=$(du -h "$file" | cut -f1)
              echo "- **${filename}** (${filesize})" >> release-notes.md
            fi
          done
          
          echo "" >> release-notes.md
          echo "### 🔐 Checksums" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          
          for file in output/*.sha256; do
            if [[ -f "$file" ]]; then
              cat "$file" >> release-notes.md
            fi
          done
          
          echo "\`\`\`" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-inputs.outputs.version }}
          name: "PVE LXC K3s Template ${{ needs.validate-inputs.outputs.version }}"
          body_path: release-notes.md
          files: |
            output/*.tar.gz
            output/*.sha256
            output/*.sha512
            output/*.md5
          draft: ${{ needs.validate-inputs.outputs.is-draft }}
          prerelease: ${{ needs.validate-inputs.outputs.is-prerelease }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布后通知
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-artifacts, create-release]
    if: success()
    steps:
      - name: Create success summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-inputs.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Template Size**: ${{ needs.build-artifacts.outputs.template-size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: ${{ needs.build-artifacts.outputs.build-time }} seconds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-inputs.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Download and test the template" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Verify installation in PVE environment" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. ✅ Announce the release" >> $GITHUB_STEP_SUMMARY

      - name: Create verification issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-inputs.outputs.version }}';
            const releaseType = '${{ inputs.release_type }}';
            
            const title = `🔍 Verify Release ${version}`;
            const body = `## Release Verification
            
            A new ${releaseType} has been created and needs verification:
            
            **Version**: ${version}
            **Type**: ${releaseType}
            **Template Size**: ${{ needs.build-artifacts.outputs.template-size }}
            **Build Time**: ${{ needs.build-artifacts.outputs.build-time }} seconds
            
            ### Verification Checklist
            
            - [ ] Download template file successfully
            - [ ] Verify SHA256 checksum
            - [ ] Upload to PVE server
            - [ ] Create LXC container from template
            - [ ] Container starts without errors
            - [ ] K3s service starts automatically
            - [ ] K3s API is accessible
            - [ ] kubectl commands work
            - [ ] Basic pod deployment succeeds
            
            ### Links
            
            - **Release**: https://github.com/${{ github.repository }}/releases/tag/${version}
            - **Workflow Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please complete verification within 48 hours and close this issue when done.
            
            /cc @${{ github.actor }}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release', 'verification', releaseType],
              assignees: [context.actor]
            });

  # 失败处理
  handle-failure:
    name: Handle Failure
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-artifacts, create-release]
    if: failure()
    steps:
      - name: Create failure summary
        run: |
          echo "## ❌ Release Creation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release creation process encountered errors." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Validate Inputs**: ${{ needs.validate-inputs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Artifacts**: ${{ needs.build-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Release**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the workflow logs for specific errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix any issues and retry the workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Contact maintainers if the issue persists" >> $GITHUB_STEP_SUMMARY

      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ inputs.version }}';
            
            const title = `🚨 Release Creation Failed: ${version}`;
            const body = `## Release Creation Failure
            
            The manual release workflow for **${version}** has failed.
            
            ### Failure Details
            - **Validate Inputs**: ${{ needs.validate-inputs.result }}
            - **Build Artifacts**: ${{ needs.build-artifacts.result }}
            - **Create Release**: ${{ needs.create-release.result }}
            
            ### Workflow Information
            - **Run ID**: ${{ github.run_id }}
            - **Run URL**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Triggered by**: @${{ github.actor }}
            
            ### Action Required
            1. Review the workflow logs for specific error messages
            2. Fix any configuration or build issues
            3. Re-run the workflow or create the release manually
            
            /cc @${{ github.actor }}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'release', 'ci/cd', 'high-priority'],
              assignees: [context.actor]
            });